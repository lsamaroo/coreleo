/**
 * 
 */
package com.coreleo.util.xml;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import com.coreleo.util.*;

/**
 * @author Leon Samaroo
 * 
 */
public class XMLReaderWriter {
    private XMLReaderWriter() {
        super();
    }


    /**
     * 
     * Convenience method. This is a short-hand way of writing writeXML( root,
     * getResource(fileName) );
     * 
     * @param root -
     *            The class that will generate the xml content.
     * @param fileName -
     *            the file to output the xml content to.
     * 
     * @return true if successful, false otherwise.
     */
    public boolean writeXMLToFile(XMLDocument root, String fileName) {
        return writeXMLToFile(root, ResourceHelper.getInstance().getFile(fileName));
    } // end write


    /**
     * 
     * This method writes the content generated by the XMLDocument and saves it
     * to the given filename.
     * 
     * @param root -
     *            The class that will generate the xml content.
     * @param fileName -
     *            the file to output the xml content to.
     * 
     * @return true if successful, false otherwise.
     */
    public boolean writeXMLToFile(XMLDocument root, File file) {
        if (file == null) {
            return false;
        }
        try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();

            DocumentBuilder builder = builderFactory.newDocumentBuilder();

            Document document = builder.newDocument();

            root.generateXMLDocument(document);

            // use Transformer to write XML Document to a file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();

            Transformer transformer = transformerFactory.newTransformer();

            // specify the Document type definition
            // transformer.setOutputProperty( OutputKeys.DOCTYPE_SYSTEM, dtd );

            transformer.transform(new DOMSource(document), new StreamResult(new FileOutputStream(file)));
            return true;
        }
        catch (Exception e) {
            return false;
        }

    }


    /**
     * 
     * This method is a short/lazy way of writing readXML( getFile(fileName),
     * tag, validate );
     * 
     * @param fileName -
     *            the xml file to read.
     * @param tag -
     *            the name of the xml element (tag) to look for in the xml
     *            document.
     * @param validate -
     *            true or false for validating the xml file.
     * @return - a NodeList containing the xml elements (tags) requested.
     */
    public NodeList getElementsByTagNameFromFile(String fileName, String tag, boolean validate) {
        return getElementsByTagNameFromFile(ResourceHelper.getInstance().getFile(fileName), tag, validate);
    } // end method readFile


    /**
     * 
     * This method will read from a specific xml file and return a List of the
     * requested tags as Node Objects.
     * 
     * For example: <code>read( "web.xml", "filter", true )</code> will return
     * a List of all the filter tags within the web.xml file.
     * 
     * @param fileName -
     *            the xml file to read.
     * @param tagName -
     *            the name of the xml element (tag) to look for in the xml
     *            document.
     * @param validate -
     *            true or false for validating the xml file.
     * @return - a NodeList containing the xml elements (tags) requested or null
     *         if an exception was encountered.
     */
    public NodeList getElementsByTagNameFromFile(File file, String tagName, boolean validate) {
        LogUtil.trace(this, "XMLReaderWriter:readXML - file=" + file + ", tag=" + tagName + ", validate=" + validate);
        if (file == null) {
            return null;
        }

        try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();

            builderFactory.setValidating(validate);

            DocumentBuilder builder = builderFactory.newDocumentBuilder();

            Document document = builder.parse(file);

            // get all elements in XML Document
            NodeList list = document.getElementsByTagName(tagName);
            return list;
        } // end try
        catch (ParserConfigurationException pce) {
            LogUtil.error(this, pce);
            return null;
        }
        catch (SAXException se) {
            LogUtil.error(this, se);
            return null;
        }
        catch (IOException ioe) {
            LogUtil.error(this, ioe);
            return null;
        }
    }

    // Initialization on Demand Holder idiom
    private static class XMLReaderWriterSingletonHolder {
        private static final XMLReaderWriter instance = new XMLReaderWriter();
    }


    public static XMLReaderWriter getInstance() {
        return XMLReaderWriterSingletonHolder.instance;
    }

}
